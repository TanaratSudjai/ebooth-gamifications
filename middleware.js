import { getToken } from "next-auth/jwt";
import { NextResponse } from "next/server";

export async function middleware(req) {
  const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });
  const path = req.nextUrl.pathname;
  console.log(token);

  // ‚úÖ ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ token
  if (path.startsWith("/api/auth") || path === "/login") {
    return NextResponse.next();
  }
  // üîí Role-based access
  if (path.startsWith("/admin") && (!token || token?.role !== "admin")) {
    return NextResponse.redirect(new URL("/", req.url));
  }
  if (path.startsWith("/personal") && (!token || token?.role !== "personal")) {
    return NextResponse.redirect(new URL("/", req.url));
  }

  if (path.startsWith("/member") && (!token || token?.role !== "member")) {
    return NextResponse.redirect(new URL("/", req.url));
  }

  // üîí Protect API
  if (path.startsWith("/api") && !token) {
    return NextResponse.json({ message: "Unauthorized" }, { status: 401 });
  }

  return NextResponse.next();
}
export const config = {
  matcher: [
    "/admin/:path*",
    "/personal/:path*",
    "/api/:path*", // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏° API
    "/login", // ‚úÖ ‡πÉ‡∏™‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô logic
  ],
};
